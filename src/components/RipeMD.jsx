import React, { useState } from 'react'
import convert from 'tc-crypto'

const RipeMD = () => {

    const [plainText, setPlainText] = useState("");
    const [publicKey, setPublicKey] = useState("");
    const [privateKey, setPrivateKey] = useState("");
    const [output, setOutput] = useState("");


    const [cipherText, setCipherText] = useState("");
    const [publicKey1, setPublicKey1] = useState("");
    const [privateKey1, setPrivateKey1] = useState("");
    const [output1, setOutput1] = useState("");

    // Function to handle encryption/decryption or processing
    const handleEncrypt = () => {
        // Example: Basic processing (you can replace this with real cryptographic logic)
        // const encryptedData = `${plainText} (Encrypted with Private Key: ${privateKey}, Public Key: ${publicKey})`;
        // setOutput(encryptedData);
        // const encryptedData = encrypt("aes", plainText, publicKey);
        const encryptedData = convert("ripe", "enc", plainText);
        setOutput(encryptedData);
    };





    return (
        <div className="p-6">
            <div>
                <h1 className="text-4xl font-bold text-blue-600 mb-8">
                    RIPEMD: A Versatile Cryptographic Hash Function
                </h1>

                <p className="text-lg mb-4">
                    In the realm of cryptography, hash functions are vital for ensuring data integrity and security. **RIPEMD (RACE Integrity Primitives Evaluation Message Digest)** is a family of cryptographic hash functions that has played a significant role in the development of secure hashing algorithms. Originally developed in the 1990s, RIPEMD has evolved through various iterations, with RIPEMD-160 being the most widely used variant today.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    What is RIPEMD?
                </h2>
                <p className="text-lg mb-4">
                    **RIPEMD** was designed to provide a secure hashing mechanism that could withstand various cryptographic attacks. It is a message-digest algorithm that produces a fixed-size output (hash) from variable-length input data. The original RIPEMD algorithm produces a 128-bit hash, while RIPEMD-160, an improved version, generates a 160-bit hash, making it more secure against collisions.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    How Does RIPEMD Work?
                </h2>
                <p className="text-lg mb-4">
                    The RIPEMD algorithm processes data in blocks and consists of multiple rounds of transformations, which include operations like bitwise functions, modular additions, and permutations. Hereâ€™s a breakdown of how RIPEMD-160 operates:
                </p>
                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">
                        **Initial Setup**: The algorithm starts with initializing five state variables that will hold the hash value throughout the computation.
                    </li>
                    <li className="mb-2">
                        **Message Padding**: To ensure the input message is a multiple of 512 bits, padding is applied, which includes the message length in bits.
                    </li>
                    <li className="mb-2">
                        **Processing Blocks**: The padded message is divided into 512-bit blocks, and each block undergoes a series of transformations through a series of rounds. RIPEMD-160 consists of 80 operations grouped into 5 rounds.
                    </li>
                    <li className="mb-2">
                        **Final Output**: After processing all blocks, the final hash value is generated by combining the state variables into a single 160-bit hash output.
                    </li>
                </ul>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Security Considerations
                </h2>
                <p className="text-lg mb-4">
                    While RIPEMD-160 was considered secure for many years, advancements in computational power have led to the discovery of vulnerabilities in some of its iterations. As a result, it is generally recommended to use RIPEMD-160 in conjunction with other cryptographic measures, such as using it alongside stronger algorithms or employing hashing schemes that provide additional security layers.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Applications of RIPEMD
                </h2>
                <p className="text-lg mb-4">
                    **RIPEMD-160** has been used in various applications, including:
                </p>
                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">
                        **Digital Signatures**: Used to hash messages before signing, ensuring the integrity and authenticity of the signed data.
                    </li>
                    <li className="mb-2">
                        **File Integrity Verification**: RIPEMD-160 can be used to verify the integrity of files by comparing the computed hash against a known hash value.
                    </li>
                    <li className="mb-2">
                        **Cryptocurrencies**: Certain cryptocurrencies utilize RIPEMD-160 for generating addresses, helping to ensure the security and integrity of wallet addresses.
                    </li>
                </ul>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    The Future of RIPEMD
                </h2>
                <p className="text-lg mb-4">
                    As cryptographic research advances, newer hash functions with stronger security guarantees, such as SHA-3, are being favored over RIPEMD-160. However, RIPEMD still holds historical significance and is utilized in certain legacy systems. Its design principles continue to influence the development of new cryptographic algorithms.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Conclusion
                </h2>
                <p className="text-lg mb-4">
                    **RIPEMD** remains a notable algorithm in the landscape of cryptographic hash functions. While it may not be the most widely adopted option today, its contributions to data integrity and security are undeniable. Understanding RIPEMD helps in appreciating the evolution of cryptographic techniques and the ongoing efforts to secure digital communications in an increasingly complex technological environment.
                </p>
            </div>

            <div className='text-black'>
                <div id='encrypt' className="">
                    <div className="min-h-screen flex flex-col items-center justify-center">
                        <div className="w-full bg-white shadow-lg rounded-lg p-6">
                            <h1 className="text-2xl font-bold text-center text-blue-600 mb-6">
                                Encrypt Plain Text
                            </h1>

                            {/* Form Inputs */}
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Plain Text:
                                </label>
                                <textarea
                                    value={plainText}
                                    onChange={(e) => setPlainText(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    rows="3"
                                    placeholder="Enter plain text..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Public Key:
                                </label>
                                <input
                                    type="text"
                                    value={publicKey}
                                    onChange={(e) => setPublicKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter public key..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Private Key:
                                </label>
                                <input
                                    type="text"
                                    value={privateKey}
                                    onChange={(e) => setPrivateKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter private key..."
                                />
                            </div>

                            {/* Button to process/encrypt */}
                            <div className="flex justify-center">
                                <button
                                    onClick={handleEncrypt}
                                    className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition"
                                >
                                    Encrypt
                                </button>
                            </div>

                            {/* Output Box */}
                            <div className="mt-6">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Output:
                                </label>
                                <textarea
                                    value={output}
                                    readOnly
                                    className="w-full p-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none"
                                    rows="3"
                                    placeholder="Output will appear here..."
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default RipeMD;