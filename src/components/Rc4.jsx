import React, { useState } from 'react'
import convert from 'tc-crypto'

const Rc4 = () => {

    const [plainText, setPlainText] = useState("");
    const [publicKey, setPublicKey] = useState("");
    const [privateKey, setPrivateKey] = useState("");
    const [output, setOutput] = useState("");


    const [cipherText, setCipherText] = useState("");
    const [publicKey1, setPublicKey1] = useState("");
    const [privateKey1, setPrivateKey1] = useState("");
    const [output1, setOutput1] = useState("");

    // Function to handle encryption/decryption or processing
    const handleEncrypt = () => {
        // Example: Basic processing (you can replace this with real cryptographic logic)
        // const encryptedData = `${plainText} (Encrypted with Private Key: ${privateKey}, Public Key: ${publicKey})`;
        // setOutput(encryptedData);
        // const encryptedData = encrypt("aes", plainText, publicKey);
        const encryptedData = convert("rc4", "enc", plainText, publicKey);
        setOutput(encryptedData);
    };

    const handleDecrypt = () => {
        // Example: Basic processing (replace this with real decryption logic)
        // const decryptedData = `${cipherText} (Decrypted with Private Key: ${privateKey}, Public Key: ${publicKey})`;
        // setPlainText(decryptedData);

        const decryptedData = convert("rc4", "dec", cipherText, publicKey1);
        setOutput1(decryptedData);
    };





    return (
        <div className="p-6">
            <div>
                <h1 className="text-4xl font-bold text-blue-600 mb-8">
                    RC4 Algorithm: A Stream Cipher with Historical Significance
                </h1>

                <p className="text-lg mb-4">
                    <strong>RC4</strong>, developed by Ron Rivest in 1987, is one of the most widely used stream ciphers in the history of cryptography. Its simplicity and speed made it a popular choice for various applications, from securing web traffic to encrypting data in wireless networks. However, despite its widespread use, vulnerabilities have emerged, leading to a decline in its adoption in modern cryptographic protocols.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    What is RC4?
                </h2>
                <p className="text-lg mb-4">
                    <strong>RC4</strong> is a symmetric stream cipher that encrypts data one byte at a time. It uses a variable-length key ranging from 1 to 256 bytes to generate a pseudo-random keystream that is XORed with the plaintext to produce ciphertext. This design allows RC4 to be fast and efficient, making it suitable for high-speed data encryption.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    How Does RC4 Work?
                </h2>
                <p className="text-lg mb-4">
                    The RC4 algorithm operates in two main phases: key scheduling and the generation of the keystream. Hereâ€™s a breakdown of how RC4 works:
                </p>

                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">
                        <strong>Key Scheduling Algorithm (KSA):</strong> This phase initializes the permutation in the array <strong>S</strong> using the provided key. It creates a state vector based on the key, mixing the values to ensure a pseudo-random distribution.
                    </li>
                    <li className="mb-2">
                        <strong>Pseudo-Random Generation Algorithm (PRGA):</strong> After the KSA, the PRGA generates the keystream by repeatedly manipulating the state vector and outputting bytes from it. This keystream is combined with the plaintext using the XOR operation to produce ciphertext.
                    </li>
                    <li className="mb-2">
                        <strong>Encryption and Decryption:</strong> The same keystream can be used for both encryption and decryption. XORing the ciphertext with the keystream returns the original plaintext.
                    </li>
                </ul>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Security Concerns of RC4
                </h2>
                <p className="text-lg mb-4">
                    Despite its initial popularity, various vulnerabilities have been discovered in RC4, particularly concerning its key scheduling. The most notable attack is the <strong>RC4 biases</strong> attack, which exploits the non-randomness of the keystream generated by RC4, allowing attackers to recover portions of the plaintext under certain conditions.
                </p>

                <p className="text-lg mb-4">
                    Due to these vulnerabilities, organizations are encouraged to transition to more secure encryption algorithms, such as AES, for their encryption needs.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Applications of RC4
                </h2>
                <p className="text-lg mb-4">
                    RC4 was widely used in various protocols and applications, including:
                </p>
                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">SSL/TLS for securing web traffic</li>
                    <li className="mb-2">WEP (Wired Equivalent Privacy) for wireless security</li>
                    <li className="mb-2">VPNs and secure communications</li>
                </ul>

                <p className="text-lg mb-4">
                    However, due to its security flaws, many of these applications have moved away from RC4 in favor of stronger encryption methods.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Conclusion
                </h2>
                <p className="text-lg mb-4">
                    RC4 played a significant role in the history of cryptography as one of the first widely adopted stream ciphers. While its speed and simplicity were revolutionary, security concerns have rendered it less suitable for modern applications. Understanding the limitations and vulnerabilities of RC4 is essential for those involved in implementing encryption solutions in today's digital landscape.
                </p>
            </div>


            <div className='text-black'>
                <div id='encrypt' className="">
                    <div className="min-h-screen flex flex-col items-center justify-center">
                        <div className="w-full bg-white shadow-lg rounded-lg p-6">
                            <h1 className="text-2xl font-bold text-center text-blue-600 mb-6">
                                Encrypt Plain Text
                            </h1>

                            {/* Form Inputs */}
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Plain Text:
                                </label>
                                <textarea
                                    value={plainText}
                                    onChange={(e) => setPlainText(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    rows="3"
                                    placeholder="Enter plain text..."
                                />
                            </div>

                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Public Key:
                                </label>
                                <input
                                    type="text"
                                    value={publicKey}
                                    onChange={(e) => setPublicKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter public key..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Private Key:
                                </label>
                                <input
                                    type="text"
                                    value={privateKey}
                                    onChange={(e) => setPrivateKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter private key..."
                                />
                            </div>

                            {/* Button to process/encrypt */}
                            <div className="flex justify-center">
                                <button
                                    onClick={handleEncrypt}
                                    className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition"
                                >
                                    Encrypt
                                </button>
                            </div>

                            {/* Output Box */}
                            <div className="mt-6">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Output:
                                </label>
                                <textarea
                                    value={output}
                                    readOnly
                                    className="w-full p-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none"
                                    rows="3"
                                    placeholder="Output will appear here..."
                                />
                            </div>
                        </div>
                    </div>
                </div>
                <div id='decrypt' className="">
                    <div className="min-h-screen flex flex-col items-center justify-center">
                        <div className="w-full bg-white shadow-lg rounded-lg p-6">
                            <h1 className="text-2xl font-bold text-center text-blue-600 mb-6">
                                Decrypt Cipher Text
                            </h1>

                            {/* Form Inputs */}
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Cipher Text:
                                </label>
                                <textarea
                                    value={cipherText}
                                    onChange={(e) => setCipherText(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    rows="3"
                                    placeholder="Enter cipher text..."
                                />
                            </div>

                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Public Key:
                                </label>
                                <input
                                    type="text"
                                    value={publicKey1}
                                    onChange={(e) => setPublicKey1(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter public key..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Private Key:
                                </label>
                                <input
                                    type="text"
                                    value={privateKey1}
                                    onChange={(e) => setPrivateKey1(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter private key..."
                                />
                            </div>

                            {/* Button to process/decrypt */}
                            <div className="flex justify-center">
                                <button
                                    onClick={handleDecrypt}
                                    className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition"
                                >
                                    Decrypt
                                </button>
                            </div>

                            {/* Output Box */}
                            <div className="mt-6">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Plain Text:
                                </label>
                                <textarea
                                    value={output1}
                                    readOnly
                                    className="w-full p-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none"
                                    rows="3"
                                    placeholder="Plain text will appear here..."
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Rc4;