import React, { useState } from 'react'
import convert from 'tc-crypto'

const Sh2 = () => {

    const [plainText, setPlainText] = useState("");
    const [publicKey, setPublicKey] = useState("");
    const [privateKey, setPrivateKey] = useState("");
    const [output, setOutput] = useState("");


    const [cipherText, setCipherText] = useState("");
    const [publicKey1, setPublicKey1] = useState("");
    const [privateKey1, setPrivateKey1] = useState("");
    const [output1, setOutput1] = useState("");

    // Function to handle encryption/decryption or processing
    const handleEncrypt = () => {
        // Example: Basic processing (you can replace this with real cryptographic logic)
        // const encryptedData = `${plainText} (Encrypted with Private Key: ${privateKey}, Public Key: ${publicKey})`;
        // setOutput(encryptedData);
        // const encryptedData = encrypt("aes", plainText, publicKey);
        const encryptedData = convert("sh2", "enc", plainText);
        setOutput(encryptedData);
    };





    return (
        <div className="p-6">
            <div>
                <h1 className="text-4xl font-bold text-blue-600 mb-8">
                    SHA-2 (Secure Hash Algorithm 2): The Standard for Modern Hashing
                </h1>

                <p className="text-lg mb-4">
                    In today’s world, cryptographic hash functions play an essential role in securing data, ensuring data integrity, and authenticating information. Among the various hashing algorithms, the **SHA-2 (Secure Hash Algorithm 2)** family is widely regarded as the standard for cryptographic security. Developed by the National Security Agency (NSA) in 2001, SHA-2 remains one of the most trusted algorithms for hashing, replacing its predecessor SHA-1 due to increased vulnerabilities.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    What is SHA-2?
                </h2>
                <p className="text-lg mb-4">
                    The **SHA-2** family of algorithms is a set of cryptographic hash functions designed to take an input (or "message") and produce a fixed-size, unique output (the "hash") that represents the original data. The SHA-2 family consists of several different hash functions, including:
                </p>
                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">**SHA-224**: Produces a 224-bit hash.</li>
                    <li className="mb-2">**SHA-256**: Produces a 256-bit hash, commonly used in secure applications.</li>
                    <li className="mb-2">**SHA-384**: Produces a 384-bit hash, offering higher security.</li>
                    <li className="mb-2">**SHA-512**: Produces a 512-bit hash, providing the highest security in the family.</li>
                </ul>

                <p className="text-lg mb-4">
                    The output, or hash, generated by these algorithms is deterministic: the same input will always produce the same hash. However, a small change to the input will result in a drastically different hash, a property known as the **avalanche effect**. This makes SHA-2 incredibly effective for verifying data integrity.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    How Does SHA-2 Work?
                </h2>
                <p className="text-lg mb-4">
                    The **SHA-2** algorithm works by processing the input data in blocks. Depending on the version of SHA-2 used, it splits the input message into blocks of 512 or 1024 bits. Here’s a high-level breakdown of how SHA-2 operates:
                </p>

                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">
                        **Preprocessing:** The input message is padded to ensure its length is a multiple of 512 or 1024 bits. Padding ensures that the algorithm can process the input in uniform block sizes.
                    </li>
                    <li className="mb-2">
                        **Message Digest Computation:** The algorithm then processes each block of the input data through a series of bitwise operations, modular additions, and logical functions, compressing the data iteratively.
                    </li>
                    <li className="mb-2">
                        **Final Hash Generation:** After processing all blocks, SHA-2 produces a fixed-length hash value, such as 256 bits for **SHA-256** or 512 bits for **SHA-512**.
                    </li>
                </ul>

                <p className="text-lg mb-4">
                    This hash can be used for a variety of purposes, such as verifying file integrity, signing digital certificates, and securing sensitive information like passwords.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Applications of SHA-2
                </h2>
                <p className="text-lg mb-4">
                    SHA-2 has widespread applications in securing digital communications, ensuring data integrity, and protecting sensitive information:
                </p>
                <ul className="list-disc ml-6 mb-4">
                    <li className="mb-2">
                        **Digital Signatures:** SHA-2 is commonly used in digital signature algorithms such as RSA and DSA to ensure the authenticity and integrity of messages.
                    </li>
                    <li className="mb-2">
                        **File Integrity Checks:** When downloading software, SHA-2 hashes are often provided to verify that the downloaded file matches the original, unaltered version.
                    </li>
                    <li className="mb-2">
                        **TLS/SSL:** Secure protocols like **TLS/SSL** use SHA-2 to protect communications between web servers and clients, securing data transmission over the internet.
                    </li>
                    <li className="mb-2">
                        **Blockchain:** Cryptocurrencies such as Bitcoin use **SHA-256** in their proof-of-work mechanisms and transaction verification processes, making SHA-2 integral to blockchain technology.
                    </li>
                </ul>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Why is SHA-2 More Secure than SHA-1?
                </h2>
                <p className="text-lg mb-4">
                    While **SHA-1** was once the gold standard for hashing, advances in computational power and cryptanalysis made it vulnerable to **collision attacks**—situations where two different inputs generate the same hash. SHA-2, with its longer hash lengths and stronger security design, provides better protection against such attacks. For instance, **SHA-256** has 2<sup>256</sup> possible outputs, making it far more resistant to collisions and brute-force attacks than SHA-1.
                </p>

                <h2 className="text-2xl font-semibold text-blue-500 mt-8 mb-4">
                    Conclusion
                </h2>
                <p className="text-lg mb-4">
                    **SHA-2** has become the backbone of modern cryptographic security, protecting everything from secure internet communications to blockchain networks. As vulnerabilities in older algorithms like SHA-1 emerged, SHA-2 has remained resilient, continuing to offer the high level of security needed in today’s digital landscape. As computing advances, SHA-2's role in maintaining the integrity and security of data will only become more important.
                </p>
            </div>

            <div className='text-black'>
                <div id='encrypt' className="">
                    <div className="min-h-screen flex flex-col items-center justify-center">
                        <div className="w-full bg-white shadow-lg rounded-lg p-6">
                            <h1 className="text-2xl font-bold text-center text-blue-600 mb-6">
                                Encrypt Plain Text
                            </h1>

                            {/* Form Inputs */}
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Plain Text:
                                </label>
                                <textarea
                                    value={plainText}
                                    onChange={(e) => setPlainText(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    rows="3"
                                    placeholder="Enter plain text..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Public Key:
                                </label>
                                <input
                                    type="text"
                                    value={publicKey}
                                    onChange={(e) => setPublicKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter public key..."
                                />
                            </div>

                            <div className="mb-4 hidden">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Private Key:
                                </label>
                                <input
                                    type="text"
                                    value={privateKey}
                                    onChange={(e) => setPrivateKey(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Enter private key..."
                                />
                            </div>

                            {/* Button to process/encrypt */}
                            <div className="flex justify-center">
                                <button
                                    onClick={handleEncrypt}
                                    className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition"
                                >
                                    Encrypt
                                </button>
                            </div>

                            {/* Output Box */}
                            <div className="mt-6">
                                <label className="block text-gray-700 text-sm font-bold mb-2">
                                    Output:
                                </label>
                                <textarea
                                    value={output}
                                    readOnly
                                    className="w-full p-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none"
                                    rows="3"
                                    placeholder="Output will appear here..."
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Sh2;